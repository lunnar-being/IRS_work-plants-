{"version":3,"file":"createServerRootMixin.js","sources":["../../../src/util/createServerRootMixin.js"],"sourcesContent":["import Vue from 'vue';\nimport instantsearch from 'instantsearch.js/es';\nimport algoliaHelper from 'algoliasearch-helper';\nconst { SearchResults, SearchParameters } = algoliaHelper;\nimport { warn } from './warn';\n\nfunction walkIndex(indexWidget, visit) {\n  visit(indexWidget);\n\n  return indexWidget.getWidgets().forEach(widget => {\n    if (widget.$$type !== 'ais.index') return;\n    visit(widget);\n    walkIndex(widget, visit);\n  });\n}\n\nfunction renderToString(app, _renderToString) {\n  return new Promise((resolve, reject) =>\n    _renderToString(app, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    })\n  );\n}\n\nfunction searchOnlyWithDerivedHelpers(helper) {\n  return new Promise((resolve, reject) => {\n    helper.searchOnlyWithDerivedHelpers();\n\n    // we assume all derived helpers resolve at least in the same tick\n    helper.derivedHelpers[0].on('result', () => {\n      resolve();\n    });\n\n    helper.derivedHelpers.forEach(derivedHelper =>\n      derivedHelper.on('error', e => {\n        reject(e);\n      })\n    );\n  });\n}\n\nfunction defaultCloneComponent(componentInstance) {\n  const options = {\n    serverPrefetch: undefined,\n    fetch: undefined,\n    _base: undefined,\n    name: 'ais-ssr-root-component',\n    // copy over global Vue APIs\n    router: componentInstance.$router,\n    store: componentInstance.$store,\n  };\n\n  const Extended = componentInstance.$vnode\n    ? componentInstance.$vnode.componentOptions.Ctor.extend(options)\n    : Vue.component(Object.assign({}, componentInstance.$options, options));\n\n  const app = new Extended({\n    propsData: componentInstance.$options.propsData,\n  });\n\n  // https://stackoverflow.com/a/48195006/3185307\n  app.$slots = componentInstance.$slots;\n  app.$root = componentInstance.$root;\n  app.$options.serverPrefetch = [];\n\n  return app;\n}\n\nfunction augmentInstantSearch(\n  instantSearchOptions,\n  searchClient,\n  indexName,\n  cloneComponent\n) {\n  /* eslint-disable no-param-reassign */\n\n  const helper = algoliaHelper(searchClient, indexName);\n  const search = instantsearch(instantSearchOptions);\n\n  let resultsState;\n\n  /**\n   * main API for SSR, called in serverPrefetch of a root component which contains instantsearch\n   * @param {object} componentInstance the calling component's `this`\n   * @returns {Promise} result of the search, to save for .hydrate\n   */\n  search.findResultsState = function(componentInstance) {\n    let _renderToString;\n    try {\n      _renderToString = require('vue-server-renderer/basic');\n    } catch (e) {\n      // error is handled by regular if, in case it's `undefined`\n    }\n    if (!_renderToString) {\n      throw new Error('you need to install vue-server-renderer');\n    }\n\n    let app;\n\n    return Promise.resolve()\n      .then(() => {\n        app = cloneComponent(componentInstance);\n\n        app.instantsearch.helper = helper;\n        app.instantsearch.mainHelper = helper;\n\n        app.instantsearch.mainIndex.init({\n          instantSearchInstance: app.instantsearch,\n          parent: null,\n          uiState: app.instantsearch._initialUiState,\n        });\n      })\n      .then(() => renderToString(app, _renderToString))\n      .then(() => searchOnlyWithDerivedHelpers(helper))\n      .then(() => {\n        const results = {};\n        walkIndex(app.instantsearch.mainIndex, widget => {\n          results[widget.getIndexId()] = widget.getResults();\n        });\n\n        search.hydrate(results);\n\n        resultsState = Object.keys(results)\n          .map(indexId => {\n            const { _state, _rawResults } = results[indexId];\n            return [\n              indexId,\n              {\n                // copy just the values of SearchParameters, not the functions\n                _state: Object.keys(_state).reduce((acc, key) => {\n                  acc[key] = _state[key];\n                  return acc;\n                }, {}),\n                _rawResults,\n              },\n            ];\n          })\n          .reduce(\n            (acc, [key, val]) => {\n              acc[key] = val;\n              return acc;\n            },\n            {\n              __identifier: 'stringified',\n            }\n          );\n        return search.getState();\n      });\n  };\n\n  /**\n   * @returns {Promise} result state to serialize and enter into .hydrate\n   */\n  search.getState = function() {\n    if (!resultsState) {\n      throw new Error('You need to wait for findResultsState to finish');\n    }\n    return resultsState;\n  };\n\n  /**\n   * make sure correct data is available in each widget's state.\n   * called in widget mixin with (this.widget, this)\n   *\n   * @param {object} widget The widget instance\n   * @param {object} parent The local parent index\n   * @returns {void}\n   */\n  search.__forceRender = function(widget, parent) {\n    const localHelper = parent.getHelper();\n\n    const results = search.__initialSearchResults[parent.getIndexId()];\n\n    // this happens when a different InstantSearch gets rendered initially,\n    // after the hydrate finished. There's thus no initial results available.\n    if (!results) {\n      return;\n    }\n\n    const state = results._state;\n\n    // helper gets created in init, but that means it doesn't get the injected\n    // parameters, because those are from the lastResults\n    localHelper.state = state;\n\n    widget.render({\n      helper: localHelper,\n      results,\n      scopedResults: parent.getScopedResults().map(result =>\n        Object.assign(result, {\n          results: search.__initialSearchResults[result.indexId],\n        })\n      ),\n      state,\n      templatesConfig: {},\n      createURL: parent.createURL,\n      instantSearchInstance: search,\n      searchMetadata: {\n        isSearchStalled: false,\n      },\n    });\n  };\n\n  /**\n   * Called both in server\n   * @param {object} results a map of indexId: SearchResults\n   * @returns {void}\n   */\n  search.hydrate = function(results) {\n    if (!results) {\n      warn(\n        'The result of `findResultsState()` needs to be passed to `hydrate()`.'\n      );\n      return;\n    }\n\n    const initialResults =\n      results.__identifier === 'stringified'\n        ? Object.keys(results).reduce((acc, indexId) => {\n            if (indexId === '__identifier') {\n              return acc;\n            }\n            acc[indexId] = new SearchResults(\n              new SearchParameters(results[indexId]._state),\n              results[indexId]._rawResults\n            );\n            return acc;\n          }, {})\n        : results;\n\n    search.__initialSearchResults = initialResults;\n\n    search.helper = helper;\n    search.mainHelper = helper;\n\n    search.mainIndex.init({\n      instantSearchInstance: search,\n      parent: null,\n      uiState: search._initialUiState,\n    });\n  };\n\n  /* eslint-enable no-param-reassign */\n  return search;\n}\n\nexport function createServerRootMixin(instantSearchOptions = {}) {\n  const {\n    searchClient,\n    indexName,\n    $cloneComponent = defaultCloneComponent,\n  } = instantSearchOptions;\n\n  if (!searchClient || !indexName) {\n    throw new Error(\n      'createServerRootMixin requires `searchClient` and `indexName` in the first argument'\n    );\n  }\n\n  const search = augmentInstantSearch(\n    instantSearchOptions,\n    searchClient,\n    indexName,\n    $cloneComponent\n  );\n\n  // put this in the user's root Vue instance\n  // we can then reuse that InstantSearch instance seamlessly from `ais-instant-search-ssr`\n  const rootMixin = {\n    provide() {\n      return {\n        $_ais_ssrInstantSearchInstance: this.instantsearch,\n      };\n    },\n    data() {\n      return {\n        // this is in data, so that the real & duplicated render do not share\n        // the same instantsearch instance.\n        instantsearch: search,\n      };\n    },\n  };\n\n  return rootMixin;\n}\n"],"names":["defaultCloneComponent","componentInstance","const","options","serverPrefetch","undefined","fetch","_base","name","router","$router","store","$store","app","$vnode","componentOptions","Ctor","extend","Vue","component","Object","assign","$options","propsData","$slots","$root","augmentInstantSearch","instantSearchOptions","searchClient","indexName","cloneComponent","resultsState","helper","algoliaHelper","search","instantsearch","findResultsState","let","_renderToString","require","e","Error","Promise","resolve","then","mainHelper","mainIndex","init","instantSearchInstance","parent","uiState","_initialUiState","reject","err","res","renderToString","searchOnlyWithDerivedHelpers","derivedHelpers","on","forEach","derivedHelper","results","walkIndex","indexWidget","visit","getWidgets","widget","$$type","getIndexId","getResults","hydrate","keys","map","indexId","_state","reduce","acc","key","_rawResults","ref","val","__identifier","getState","__forceRender","localHelper","getHelper","__initialSearchResults","state","render","scopedResults","getScopedResults","result","templatesConfig","createURL","searchMetadata","isSearchStalled","initialResults","SearchResults","SearchParameters","warn","createServerRootMixin","$cloneComponent","provide","$_ais_ssrInstantSearchInstance","this","data"],"mappings":"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"}